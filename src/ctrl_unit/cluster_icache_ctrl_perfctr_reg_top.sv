// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module cluster_icache_ctrl_perfctr_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output cluster_icache_ctrl_perfctr_reg_pkg::cluster_icache_ctrl_perfctr_reg2hw_t reg2hw, // Write
  input  cluster_icache_ctrl_perfctr_reg_pkg::cluster_icache_ctrl_perfctr_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import cluster_icache_ctrl_perfctr_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic enable_qs;
  logic enable_wd;
  logic enable_we;
  logic flush_qs;
  logic flush_wd;
  logic flush_we;
  logic flush_re;
  logic flush_l1_only_qs;
  logic flush_l1_only_wd;
  logic flush_l1_only_we;
  logic flush_l1_only_re;
  logic [7:0] sel_flush_icache_qs;
  logic [7:0] sel_flush_icache_wd;
  logic sel_flush_icache_we;
  logic sel_flush_icache_re;
  logic clear_counters_qs;
  logic clear_counters_wd;
  logic clear_counters_we;
  logic clear_counters_re;
  logic enable_counters_qs;
  logic enable_counters_wd;
  logic enable_counters_we;
  logic enable_prefetch_qs;
  logic enable_prefetch_wd;
  logic enable_prefetch_we;
  logic [31:0] counters_0_qs;
  logic [31:0] counters_0_wd;
  logic counters_0_we;
  logic [31:0] counters_1_qs;
  logic [31:0] counters_1_wd;
  logic counters_1_we;
  logic [31:0] counters_2_qs;
  logic [31:0] counters_2_wd;
  logic counters_2_we;
  logic [31:0] counters_3_qs;
  logic [31:0] counters_3_wd;
  logic counters_3_we;

  // Register instances
  // R[enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (enable_we),
    .wd     (enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.enable.q ),

    // to register interface (read)
    .qs     (enable_qs)
  );


  // R[flush]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_flush (
    .re     (flush_re),
    .we     (flush_we),
    .wd     (flush_wd),
    .d      (hw2reg.flush.d),
    .qre    (),
    .qe     (reg2hw.flush.qe),
    .q      (reg2hw.flush.q ),
    .qs     (flush_qs)
  );


  // R[flush_l1_only]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_flush_l1_only (
    .re     (flush_l1_only_re),
    .we     (flush_l1_only_we),
    .wd     (flush_l1_only_wd),
    .d      (hw2reg.flush_l1_only.d),
    .qre    (),
    .qe     (reg2hw.flush_l1_only.qe),
    .q      (reg2hw.flush_l1_only.q ),
    .qs     (flush_l1_only_qs)
  );


  // R[sel_flush_icache]: V(True)

  prim_subreg_ext #(
    .DW    (8)
  ) u_sel_flush_icache (
    .re     (sel_flush_icache_re),
    .we     (sel_flush_icache_we),
    .wd     (sel_flush_icache_wd),
    .d      (hw2reg.sel_flush_icache.d),
    .qre    (),
    .qe     (reg2hw.sel_flush_icache.qe),
    .q      (reg2hw.sel_flush_icache.q ),
    .qs     (sel_flush_icache_qs)
  );


  // R[clear_counters]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_clear_counters (
    .re     (clear_counters_re),
    .we     (clear_counters_we),
    .wd     (clear_counters_wd),
    .d      (hw2reg.clear_counters.d),
    .qre    (),
    .qe     (reg2hw.clear_counters.qe),
    .q      (reg2hw.clear_counters.q ),
    .qs     (clear_counters_qs)
  );


  // R[enable_counters]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_enable_counters (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (enable_counters_we),
    .wd     (enable_counters_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.enable_counters.q ),

    // to register interface (read)
    .qs     (enable_counters_qs)
  );


  // R[enable_prefetch]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_enable_prefetch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (enable_prefetch_we),
    .wd     (enable_prefetch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.enable_prefetch.q ),

    // to register interface (read)
    .qs     (enable_prefetch_qs)
  );



  // Subregister 0 of Multireg counters
  // R[counters_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_counters_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (counters_0_we),
    .wd     (counters_0_wd),

    // from internal hardware
    .de     (hw2reg.counters[0].de),
    .d      (hw2reg.counters[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.counters[0].q ),

    // to register interface (read)
    .qs     (counters_0_qs)
  );

  // Subregister 1 of Multireg counters
  // R[counters_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_counters_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (counters_1_we),
    .wd     (counters_1_wd),

    // from internal hardware
    .de     (hw2reg.counters[1].de),
    .d      (hw2reg.counters[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.counters[1].q ),

    // to register interface (read)
    .qs     (counters_1_qs)
  );

  // Subregister 2 of Multireg counters
  // R[counters_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_counters_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (counters_2_we),
    .wd     (counters_2_wd),

    // from internal hardware
    .de     (hw2reg.counters[2].de),
    .d      (hw2reg.counters[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.counters[2].q ),

    // to register interface (read)
    .qs     (counters_2_qs)
  );

  // Subregister 3 of Multireg counters
  // R[counters_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_counters_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (counters_3_we),
    .wd     (counters_3_wd),

    // from internal hardware
    .de     (hw2reg.counters[3].de),
    .d      (hw2reg.counters[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.counters[3].q ),

    // to register interface (read)
    .qs     (counters_3_qs)
  );




  logic [10:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_ENABLE_OFFSET);
    addr_hit[ 1] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_FLUSH_OFFSET);
    addr_hit[ 2] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_FLUSH_L1_ONLY_OFFSET);
    addr_hit[ 3] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_SEL_FLUSH_ICACHE_OFFSET);
    addr_hit[ 4] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_CLEAR_COUNTERS_OFFSET);
    addr_hit[ 5] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_ENABLE_COUNTERS_OFFSET);
    addr_hit[ 6] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_ENABLE_PREFETCH_OFFSET);
    addr_hit[ 7] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_COUNTERS_0_OFFSET);
    addr_hit[ 8] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_COUNTERS_1_OFFSET);
    addr_hit[ 9] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_COUNTERS_2_OFFSET);
    addr_hit[10] = (reg_addr == CLUSTER_ICACHE_CTRL_PERFCTR_COUNTERS_3_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CLUSTER_ICACHE_CTRL_PERFCTR_PERMIT[10] & ~reg_be)))));
  end

  assign enable_we = addr_hit[0] & reg_we & !reg_error;
  assign enable_wd = reg_wdata[0];

  assign flush_we = addr_hit[1] & reg_we & !reg_error;
  assign flush_wd = reg_wdata[0];
  assign flush_re = addr_hit[1] & reg_re & !reg_error;

  assign flush_l1_only_we = addr_hit[2] & reg_we & !reg_error;
  assign flush_l1_only_wd = reg_wdata[0];
  assign flush_l1_only_re = addr_hit[2] & reg_re & !reg_error;

  assign sel_flush_icache_we = addr_hit[3] & reg_we & !reg_error;
  assign sel_flush_icache_wd = reg_wdata[7:0];
  assign sel_flush_icache_re = addr_hit[3] & reg_re & !reg_error;

  assign clear_counters_we = addr_hit[4] & reg_we & !reg_error;
  assign clear_counters_wd = reg_wdata[0];
  assign clear_counters_re = addr_hit[4] & reg_re & !reg_error;

  assign enable_counters_we = addr_hit[5] & reg_we & !reg_error;
  assign enable_counters_wd = reg_wdata[0];

  assign enable_prefetch_we = addr_hit[6] & reg_we & !reg_error;
  assign enable_prefetch_wd = reg_wdata[0];

  assign counters_0_we = addr_hit[7] & reg_we & !reg_error;
  assign counters_0_wd = reg_wdata[31:0];

  assign counters_1_we = addr_hit[8] & reg_we & !reg_error;
  assign counters_1_wd = reg_wdata[31:0];

  assign counters_2_we = addr_hit[9] & reg_we & !reg_error;
  assign counters_2_wd = reg_wdata[31:0];

  assign counters_3_we = addr_hit[10] & reg_we & !reg_error;
  assign counters_3_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = enable_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = flush_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = flush_l1_only_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[7:0] = sel_flush_icache_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = clear_counters_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = enable_counters_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = enable_prefetch_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = counters_0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = counters_1_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = counters_2_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = counters_3_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module cluster_icache_ctrl_perfctr_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output cluster_icache_ctrl_perfctr_reg_pkg::cluster_icache_ctrl_perfctr_reg2hw_t reg2hw, // Write
  input  cluster_icache_ctrl_perfctr_reg_pkg::cluster_icache_ctrl_perfctr_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  cluster_icache_ctrl_perfctr_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


